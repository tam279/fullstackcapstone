generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Company {
  id          String    @id @default(uuid())
  name        String
  address     String
  phoneNumber String
  website     String
  deleted     Boolean   @default(false)
  projects    Project[]
  users       User[]
}

model User {
  id                   String     @id @default(uuid())
  email                String     @unique
  password             String
  firstName            String
  lastName             String
  role                 Role       @default(USER)
  companyId            String
  phoneNumber          String
  jobTitle             String
  deleted              Boolean    @default(false)
  activity             Activity[]
  comments             Comment[]
  projectsAsManager    Project[]  @relation("manager")
  company              Company    @relation(fields: [companyId], references: [id])
  tags                 String     @default("")
  tasks                Task[]     @relation("TaskToUser")
  projectsAsTechnician Project[]  @relation("Technicians")
  projectsAsViewer     Project[]  @relation("Viewers")
}

model Project {
  id          String     @id @default(uuid())
  name        String
  companyId   String
  description String
  startDate   DateTime
  endDate     DateTime
  managerId   String
  deleted     Boolean    @default(false)
  activity    Activity[]
  company     Company    @relation(fields: [companyId], references: [id])
  manager     User       @relation("manager", fields: [managerId], references: [id])
  tasks       Task[]
  technicians User[]     @relation("Technicians")
  viewers     User[]     @relation("Viewers")
}

model Task {
  id            String    @id @default(uuid())
  name          String
  projectId     String?
  description   String
  status        Status
  priorityLevel Int
  startDate     DateTime
  endDate       DateTime
  deleted       Boolean   @default(false)
  comments      Comment[]
  project       Project?  @relation(fields: [projectId], references: [id])
  technicians   User[]    @relation("TaskToUser")
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  timeStamp DateTime
  taskId    String
  userId    String?
  deleted   Boolean  @default(false)
  task      Task     @relation(fields: [taskId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  files     File[]
}

model File {
  id        String   @id @default(uuid())
  name      String
  taskId    String?
  commentId String?
  deleted   Boolean  @default(false)
  data      Bytes
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String    @id @default(uuid())
  activity  String
  timestamp DateTime? @default(now()) @db.Timestamp(0)
  userId    String
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model prisma_new_comment {
  COMMENTID Int       @id(map: "comment_pkey") @default(sequence())
  COMMENT   String?
  DATE      DateTime? @db.Date
  TASKID    Int?
  EMAIL     String?

  @@map("_prisma_new_comment")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
