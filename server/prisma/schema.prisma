// Prisma Client configuration.
generator client {
  // Define the Prisma client provider.
  provider   = "prisma-client-js"
  // Define the type of engine used by Prisma.
  engineType = "binary"
}

// Database connection details.
datasource db {
  // Define the type of database being used.
  provider = "cockroachdb"
  // Fetch database connection string from environment variables.
  url      = env("DATABASE_URL")
}

// Define the Company model.
model Company {
  id          String    @id @default(uuid())
  name        String
  address     String
  phoneNumber String
  website     String
  deleted     Boolean   @default(false)
  projects    Project[]
  users       User[]
}

// Define the User model.
model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  password             String
  firstName            String
  lastName             String
  role                 Role      @default(USER)
  companyId            String
  phoneNumber          String
  jobTitle             String
  deleted              Boolean   @default(false)
  comments             Comment[]
  projectsAsManager    Project[] @relation("manager")
  company              Company   @relation(fields: [companyId], references: [id])
  tags                 String    @default("")
  tasks                Task[]    @relation("TaskToUser")
  projectsAsTechnician Project[] @relation("Technicians")
  projectsAsViewer     Project[] @relation("Viewers")
}

// Define the Project model.
model Project {
  id          String   @id @default(uuid())
  name        String
  companyId   String
  description String
  startDate   DateTime
  endDate     DateTime
  managerId   String
  deleted     Boolean  @default(false)
  company     Company  @relation(fields: [companyId], references: [id])
  manager     User     @relation("manager", fields: [managerId], references: [id])
  tasks       Task[]
  technicians User[]   @relation("Technicians")
  viewers     User[]   @relation("Viewers")
}

// Define the Task model.
model Task {
  id            String    @id @default(uuid())
  name          String
  projectId     String?
  description   String
  status        Status
  priorityLevel Int
  startDate     DateTime
  endDate       DateTime
  dependencies  String?   @default("")
  deleted       Boolean   @default(false)
  comments      Comment[]
  project       Project?  @relation(fields: [projectId], references: [id])
  technicians   User[]    @relation("TaskToUser")
}

// Define the Comment model.
model Comment {
  id        String   @id @default(uuid())
  comment   String
  timeStamp DateTime
  taskId    String
  userId    String?
  deleted   Boolean  @default(false)
  task      Task     @relation(fields: [taskId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  files     File[]
}

// Define the File model.
model File {
  id        String   @id @default(uuid())
  name      String
  taskId    String?
  commentId String?
  deleted   Boolean  @default(false)
  data      Bytes
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

// Define a model for potential new comment integration.
model prisma_new_comment {
  COMMENTID Int       @id(map: "comment_pkey") @default(sequence())
  COMMENT   String?
  DATE      DateTime? @db.Date
  TASKID    Int?
  EMAIL     String?

  @@map("_prisma_new_comment")
}

// Define the user roles using an enum.
enum Role {
  USER
  ADMIN
}

// Define the task status using an enum.
enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
