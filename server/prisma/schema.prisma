generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model comment {
  COMMENTID String    @id
  COMMENT   String?
  DATE      DateTime?
  TASKID    Int?
  EMAIL     String?
  FILENAME  String?

  @@index([EMAIL], map: "EMAIL")
  @@index([TASKID], map: "TASKID")
}

model comment_file_bridge {
  COMMENTID Int
  FILEID    Int

  @@id([COMMENTID, FILEID])
}

model company {
  COMPANYID    String    @id
  COMPANYNAME  String?
  CREATED_AT   DateTime?
  ISACTIVE     Int?      @default(1)
  ADDRESS      String?
  PHONE_NUMBER String?
  WEBSITE      String?
}

model file {
  FILEID       Int     @id @default(sequence())
  FILENAME     String?
  FILELOCATION String?
}

model login_method {
  METHODID   Int     @id @default(sequence())
  METHODNAME String?
}

model password_reset_tokens {
  EMAIL       String?
  TOKEN       String    @id
  EXPIRY_DATE DateTime? @db.Timestamp(0)
}

model project {
  PROJECTID   String    @id
  NAME        String?
  DESCRIPTION String?
  STARTDATE   DateTime?
  ENDDATE     DateTime?
  STATUS      String?   @default("Not Started")
  PROGRESS    Int?      @default(0)
  ISACTIVE    Int?      @default(1)
  COMPANYID   Int?

  @@index([COMPANYID], map: "COMPANYID")
}

model project_manager_bridge {
  PROJECTID    Int
  MANAGEREMAIL String

  @@id([PROJECTID, MANAGEREMAIL])
  @@index([MANAGEREMAIL], map: "MANAGEREMAIL")
}

model project_technician_bridge {
  PROJECTID       Int
  TECHNICIANEMAIL String

  @@id([PROJECTID, TECHNICIANEMAIL])
  @@index([TECHNICIANEMAIL], map: "TECHNICIANEMAIL")
}

model project_viewer_bridge {
  PROJECTID   Int
  VIEWEREMAIL String

  @@id([PROJECTID, VIEWEREMAIL])
  @@index([VIEWEREMAIL], map: "VIEWEREMAIL")
}

model projecttagbridge {
  TAGID     Int
  PROJECTID Int

  @@id([TAGID, PROJECTID])
  @@index([PROJECTID], map: "PROJECTID")
}

model role {
  ROLEID   String  @id
  ROLENAME String?
}

model tag {
  TAGID   String  @id
  TAGNAME String?
}

model task {
  TASKID           String    @id
  NAME             String?
  STARTDATE        DateTime?
  ENDDATE          DateTime?
  PROGRESS         Int?      @default(0)
  DESCRIPTION      String?
  STATUS           String?
  PRIORITY         String?
  ISACTIVE         Int?      @default(1)
  PROJECTID        Int?
  DURATION         String?
  TAG              String?
  DEPENDENCY       Int?
  projectPROJECTID Int?

  @@index([PROJECTID], map: "PROJECTID")
}

model task_file_bridge {
  FILEID Int
  TASKID Int

  @@id([FILEID, TASKID])
  @@index([TASKID], map: "TASKID")
}

model task_technician_bridge {
  EMAIL  String
  TASKID Int

  @@id([EMAIL, TASKID])
  @@index([TASKID], map: "TASKID")
}

model task_user_bridge {
  EMAIL  String
  TASKID Int

  @@id([EMAIL, TASKID])
  @@index([TASKID], map: "TASKID")
}

model user {
  EMAIL             String  @id @unique(map: "EMAIL")
  PASSWORD          String?
  FIRSTNAME         String?
  LASTNAME          String?
  ISACTIVE          Int?    @default(1)
  IS_EMAIL_VERIFIED Int?    @default(0)
  TAG               String?
  COMPANYID         Int?
  ROLEID            Int?
  METHODID          Int?
  PHONE_NUMBER      String?
  JOB_TITLE         String?

  @@index([COMPANYID], map: "COMPANYID")
  @@index([METHODID], map: "METHODID")
  @@index([ROLEID], map: "ROLEID")
}

model user_activity {
  ACTIVITYID  String    @id
  EMAIL       String?
  TIMESTAMP   DateTime? @default(now()) @db.Timestamp(0)
  DESCRIPTION String?
  PROJECTID   Int?

  @@index([EMAIL], map: "EMAIL")
  @@index([PROJECTID], map: "PROJECTID")
}

model user_project_bridge {
  USER_EMAIL String
  PROJECTID  Int
  IS_MANAGER Boolean? @default(false)

  @@id([USER_EMAIL, PROJECTID])
  @@index([PROJECTID], map: "PROJECTID")
}

model user_task_bridge {
  USER_EMAIL    String
  TASKID        Int
  IS_TECHNICIAN Boolean? @default(false)

  @@id([USER_EMAIL, TASKID])
  @@index([TASKID], map: "TASKID")
}

model usertagbridge {
  TAGID Int
  EMAIL String

  @@id([TAGID, EMAIL])
  @@index([EMAIL], map: "EMAIL")
}

model viewer_bridge {
  PROJECTID   Int
  VIEWEREMAIL String

  @@id([PROJECTID, VIEWEREMAIL])
  @@index([VIEWEREMAIL], map: "VIEWEREMAIL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Dependencies {
  A Int
  B Int

  @@map("_Dependencies")
  @@ignore
}

model prisma_new_comment {
  COMMENTID Int       @id(map: "comment_pkey") @default(sequence())
  COMMENT   String?
  DATE      DateTime? @db.Date
  TASKID    Int?
  EMAIL     String?

  @@map("_prisma_new_comment")
}
