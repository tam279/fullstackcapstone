generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Company {
  id          String @id @default(uuid())
  name        String
  address     String
  phoneNumber String
  website     String

  users    User[]
  projects Project[]
  deleted  Boolean   @default(false)
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  password    String
  firstName   String
  lastName    String
  role        Role       @default(USER)
  company     Company    @relation(fields: [companyId], references: [id])
  companyId   String
  phoneNumber String
  jobTitle    String
  tags        Tag[]
  tasks       Task[]
  comments    Comment[]
  activity    Activity[]

  projectsAsTechnician Project[] @relation("Technicians")
  projectsAsViewer     Project[] @relation("Viewers")
  projectsAsManager    Project[] @relation("manager")

  deleted Boolean @default(false)
}

enum Role {
  USER
  ADMIN
}

model Tag {
  id   String @id @default(uuid())
  name String

  users    User[]
  projects Project[]

  deleted Boolean @default(false)
}

model Project {
  id          String  @id @default(uuid())
  name        String
  company     Company @relation(fields: [companyId], references: [id])
  companyId   String
  description String

  startDate DateTime
  endDate   DateTime

  tag Tag[]

  technicians User[] @relation("Technicians")
  viewers     User[] @relation("Viewers")
  manager     User   @relation("manager", fields: [managerId], references: [id])
  managerId   String

  tasks    Task[]
  activity Activity[]

  deleted Boolean @default(false)
}

model Task {
  id          String   @id @default(uuid())
  name        String
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
  description String

  status        Status
  priorityLevel Int

  startDate DateTime
  endDate   DateTime

  technicians User[]
  comments    Comment[]
  files       File[]    @relation("File")

  dependencies   Task[] @relation("Dependencies")
  dependentTasks Task[] @relation("Dependencies")

  deleted Boolean @default(false)
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  timeStamp DateTime
  files     File[]

  task   Task    @relation(fields: [taskId], references: [id])
  taskId String
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  deleted Boolean @default(false)
}

model File {
  id        String   @id @default(uuid())
  name      String
  task      Task     @relation("File", fields: [taskId], references: [id])
  taskId    String
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  deleted   Boolean  @default(false)
}

model Activity {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  project   Project   @relation(fields: [projectId], references: [id])
  activity  String
  timestamp DateTime? @default(now()) @db.Timestamp(0)

  userId    String
  projectId String
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Dependencies {
  A Int
  B Int

  @@map("_Dependencies")
  @@ignore
}

model prisma_new_comment {
  COMMENTID Int       @id(map: "comment_pkey") @default(sequence())
  COMMENT   String?
  DATE      DateTime? @db.Date
  TASKID    Int?
  EMAIL     String?

  @@map("_prisma_new_comment")
}
