CREATE DATABASE IF NOT EXISTS PMSDATABASE CHARACTER SET UTF8MB4 COLLATE UTF8MB4_UNICODE_CI;

USE PMSDATABASE;

-- Drop tables if they exist
SET FOREIGN_KEY_CHECKS = 1;

CREATE DATABASE IF NOT EXISTS PMSDATABASE CHARACTER SET UTF8MB4 COLLATE UTF8MB4_UNICODE_CI;

USE PMSDATABASE;

-- Drop tables if they exist
SET FOREIGN_KEY_CHECKS = 0;

DROP TABLE IF EXISTS PASSWORD_RESET_TOKENS;

DROP TABLE IF EXISTS FILE;

DROP TABLE IF EXISTS COMMENT;

DROP TABLE IF EXISTS PROJECTTAGBRIDGE;

DROP TABLE IF EXISTS USERTAGBRIDGE;

DROP TABLE IF EXISTS TAG;

DROP TABLE IF EXISTS TASK_TECHNICIAN_BRIDGE;

DROP TABLE IF EXISTS TASK_USER_BRIDGE;

DROP TABLE IF EXISTS VIEWER_BRIDGE;

DROP TABLE IF EXISTS PROJECT_MANAGER_BRIDGE;

DROP TABLE IF EXISTS PROJECT_TECHNICIAN_BRIDGE;

DROP TABLE IF EXISTS PROJECT;

DROP TABLE IF EXISTS TASK;

DROP TABLE IF EXISTS USER_ACTIVITY;

DROP TABLE IF EXISTS USER;

DROP TABLE IF EXISTS LOGIN_METHOD;

DROP TABLE IF EXISTS ROLE;

DROP TABLE IF EXISTS COMPANY;

SET FOREIGN_KEY_CHECKS = 1;

-- Now create your tables as you did in your previous message


-- Create tables

CREATE TABLE COMPANY (
    COMPANYID INT AUTO_INCREMENT PRIMARY KEY,
    COMPANYNAME VARCHAR(255),
    CREATED_AT TIMESTAMP NULL DEFAULT NULL,
    ISACTIVE INT DEFAULT 1,
    ADDRESS VARCHAR(255),
    PHONE_NUMBER VARCHAR(20),
    WEBSITE VARCHAR(255)
);

CREATE TABLE ROLE (
    ROLEID INT AUTO_INCREMENT PRIMARY KEY,
    ROLENAME VARCHAR(255)
);

CREATE TABLE LOGIN_METHOD (
    METHODID INT AUTO_INCREMENT PRIMARY KEY,
    METHODNAME VARCHAR(255)
);

CREATE TABLE USER (
    EMAIL VARCHAR(255) PRIMARY KEY,
    PASSWORD VARCHAR(255),
    FIRSTNAME VARCHAR(255),
    LASTNAME VARCHAR(255),
    ISACTIVE INT DEFAULT 1,
    IS_EMAIL_VERIFIED INT DEFAULT 0,
    TAG VARCHAR(255),
    COMPANYID INT,
    ROLEID INT,
    METHODID INT,
    PHONE_NUMBER VARCHAR(20),
    JOB_TITLE VARCHAR(255),
    UNIQUE(EMAIL),
    FOREIGN KEY(COMPANYID) REFERENCES COMPANY(COMPANYID),
    FOREIGN KEY(ROLEID) REFERENCES ROLE(ROLEID),
    FOREIGN KEY(METHODID) REFERENCES LOGIN_METHOD(METHODID)
);

-- Updated table
CREATE TABLE PROJECT (
    PROJECTID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(255),
    DESCRIPTION VARCHAR(255),
    STARTDATE DATE,
    ENDDATE DATE,
    STATUS VARCHAR(50) DEFAULT 'Not Started', -- Default value set to 'Not Started'
    TOTAL_TASKS INT DEFAULT 0,
    COMPLETED_TASKS INT DEFAULT 0,
    PROGRESS INT DEFAULT 0,
    ISACTIVE INT DEFAULT 1,
    COMPANYID INT,
    FOREIGN KEY(COMPANYID) REFERENCES COMPANY(COMPANYID)
);

CREATE TABLE USER_ACTIVITY (
    ACTIVITYID INT AUTO_INCREMENT PRIMARY KEY,
    EMAIL VARCHAR(255),
    TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DESCRIPTION VARCHAR(255),
    PROJECTID INT,
    FOREIGN KEY(EMAIL) REFERENCES USER(EMAIL),
    FOREIGN KEY(PROJECTID) REFERENCES PROJECT(PROJECTID)
);

CREATE TABLE TASK (
    TASKID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(255),
    STARTDATE DATETIME,
    ENDDATE DATETIME,
    PROGRESS INT DEFAULT 0,
    DESCRIPTION VARCHAR(255),
    STATUS VARCHAR(50),
    PRIORITY VARCHAR(50),
    ISACTIVE INT DEFAULT 1,
    PROJECTID INT,
    DURATION VARCHAR(50),
    TAG VARCHAR(255),
    DEPENDENCY VARCHAR(255),
    FOREIGN KEY(PROJECTID) REFERENCES PROJECT(PROJECTID)
);

CREATE TABLE PROJECT_MANAGER_BRIDGE (
    PROJECTID INT,
    MANAGEREMAIL VARCHAR(255),
    PRIMARY KEY(PROJECTID, MANAGEREMAIL),
    FOREIGN KEY(PROJECTID) REFERENCES PROJECT(PROJECTID),
    FOREIGN KEY(MANAGEREMAIL) REFERENCES USER(EMAIL)
);

CREATE TABLE VIEWER_BRIDGE (
    PROJECTID INT,
    VIEWEREMAIL VARCHAR(255),
    PRIMARY KEY(PROJECTID, VIEWEREMAIL),
    FOREIGN KEY(PROJECTID) REFERENCES PROJECT(PROJECTID),
    FOREIGN KEY(VIEWEREMAIL) REFERENCES USER(EMAIL)
);

CREATE TABLE PROJECT_TECHNICIAN_BRIDGE (
    PROJECTID INT,
    TECHNICIANEMAIL VARCHAR(255),
    PRIMARY KEY(PROJECTID, TECHNICIANEMAIL),
    FOREIGN KEY(PROJECTID) REFERENCES PROJECT(PROJECTID),
    FOREIGN KEY(TECHNICIANEMAIL) REFERENCES USER(EMAIL)
);

CREATE TABLE TASK_USER_BRIDGE (
    EMAIL VARCHAR(255),
    TASKID INT,
    PRIMARY KEY(EMAIL, TASKID),
    FOREIGN KEY(EMAIL) REFERENCES USER(EMAIL),
    FOREIGN KEY(TASKID) REFERENCES TASK(TASKID)
);

CREATE TABLE TASK_TECHNICIAN_BRIDGE (
    EMAIL VARCHAR(255),
    TASKID INT,
    PRIMARY KEY(EMAIL, TASKID),
    FOREIGN KEY(EMAIL) REFERENCES USER(EMAIL),
    FOREIGN KEY(TASKID) REFERENCES TASK(TASKID)
);

CREATE TABLE TAG (
    TAGID INT AUTO_INCREMENT PRIMARY KEY,
    TAGNAME VARCHAR(255)
);

CREATE TABLE USERTAGBRIDGE (
    TAGID INT,
    EMAIL VARCHAR(255),
    PRIMARY KEY(TAGID, EMAIL),
    FOREIGN KEY(TAGID) REFERENCES TAG(TAGID),
    FOREIGN KEY(EMAIL) REFERENCES USER(EMAIL)
);

CREATE TABLE PROJECTTAGBRIDGE (
    TAGID INT,
    PROJECTID INT,
    PRIMARY KEY(TAGID, PROJECTID),
    FOREIGN KEY(TAGID) REFERENCES TAG(TAGID),
    FOREIGN KEY(PROJECTID) REFERENCES PROJECT(PROJECTID)
);

CREATE TABLE COMMENT (
    COMMENTID INT AUTO_INCREMENT PRIMARY KEY,
    COMMENT VARCHAR(255),
    DATE DATETIME,
    TASKID INT,
    EMAIL VARCHAR(255),
    FILENAME VARCHAR(255) DEFAULT NULL,
    FILEDATA LONGBLOB DEFAULT NULL,
    FOREIGN KEY(TASKID) REFERENCES TASK(TASKID),
    FOREIGN KEY(EMAIL) REFERENCES USER(EMAIL)
);

CREATE TABLE PASSWORD_RESET_TOKENS (
    EMAIL VARCHAR(255),
    TOKEN VARCHAR(255),
    EXPIRY_DATE TIMESTAMP NULL DEFAULT NULL,
    PRIMARY KEY(TOKEN),
    FOREIGN KEY(EMAIL) REFERENCES USER(EMAIL)
);